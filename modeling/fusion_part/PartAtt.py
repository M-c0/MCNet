import math

import torch
from torch import nn

from modeling.backbones.vit_pytorch import DropPath


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        print("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
              "The distribution of values may be incorrect.", )

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `model.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = model.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


class MlpMasked(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0., qkv_bias=True):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features, bias=qkv_bias)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features, bias=qkv_bias)
        self.drop = nn.Dropout(drop)

    def forward(self, x, mask):
        if x.shape[1] != mask.shape[1]:
            scale = x.shape[1] // mask.shape[1]
            mask = mask.repeat(1, scale, 1)
        x = x * mask
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x

class Part_Attention(nn.Module):
    def __init__(self, ratio=0.5):
        super(Part_Attention, self).__init__()
        self.ratio = ratio

    def forward(self, x):
        length = len(x)
        N = x[0].shape[2] - 1
        B = x[0].shape[0]
        k = 0
        last_map = x[k]  # 64,12,129,129  每个阶段的att map
        for i in range(k + 1, length):
            last_map = torch.matmul(x[i], last_map)
        last_map = last_map[:, :, 0, 1:]  # 64,12,128  每个头，class_token 和 patch 之间的相似度/att
        for i in range(last_map.shape[1]):
            _, topk_indices = torch.topk(last_map[:, i, :], int(N * self.ratio), dim=1)  # 每个头只取 topk 个patch？？？？   batchsize, N * self.ratio
            topk_indices = torch.sort(topk_indices, dim=1).values
            selected_tokens_mask = torch.zeros((B, N), dtype=torch.bool).cuda()
            selected_tokens_mask.scatter_(1, topk_indices, 1)
            if i == 0:
                max_index_set = selected_tokens_mask
            else:
                max_index_set = max_index_set | selected_tokens_mask

        return _, max_index_set


class AttentionMask(nn.Module):
    def __init__(self, dim, num_heads=12, qkv_bias=False, qk_scale=None, attn_drop=0., proj_drop=0.):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads
        # NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights
        self.scale = qk_scale or head_dim ** -0.5

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim, bias=qkv_bias)
        self.proj_drop = nn.Dropout(proj_drop)

    def forward(self, x, mask):
        B, N, C = x.shape
        if x.shape[1] != mask.shape[1]:
            scale = x.shape[1] // mask.shape[1]
            mask = mask.repeat(1, scale, 1)
        x = x * mask
        qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        q, k, v = qkv[0], qkv[1], qkv[2]  # make torchscript happy (cannot use tensor as tuple)

        attn = (q @ k.transpose(-2, -1)) * self.scale
        mask = mask.unsqueeze(1).repeat(1, self.num_heads, 1, 1)
        mask_ = mask @ mask.transpose(-2, -1)
        attn = attn.masked_fill(mask_ == 0, float(-65504.0))
        attn = attn.softmax(dim=-1) * mask
        attn = self.attn_drop(attn)
        x = (attn @ v).transpose(1, 2).reshape(B, N, C)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x


class BlockMask(nn.Module):

    def __init__(self, dim, num_heads, mlp_ratio=4., num_class=171, qkv_bias=False, qk_scale=None, drop=0.,
                 attn_drop=0.,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm, momentum=0.9):
        super().__init__()
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.normR = norm_layer(dim)
        self.attnR = AttentionMask(dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop,
                                   proj_drop=drop)
        self.normR_ = norm_layer(dim)
        self.mlpR = MlpMasked(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop,
                              qkv_bias=qkv_bias)

        self.normN = norm_layer(dim)
        self.attnN = AttentionMask(dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop,
                                   proj_drop=drop)
        self.normN_ = norm_layer(dim)
        self.mlpN = MlpMasked(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop,
                              qkv_bias=qkv_bias)

        self.normT = norm_layer(dim)
        self.attnT = AttentionMask(dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop,
                                   proj_drop=drop)
        self.normT_ = norm_layer(dim)
        self.mlpT = MlpMasked(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop,
                              qkv_bias=qkv_bias)

        self.norm1 = norm_layer(dim)
        self.attn1 = AttentionMask(
            dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop)
        # NOTE: drop path for stochastic depth, we shall see if this is better than dropout here
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        self.norm2 = norm_layer(dim)
        self.mlp = MlpMasked(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop,
                             qkv_bias=qkv_bias)
        self.out_norm = norm_layer(dim)
        self.apply(self._init_weights)
    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    def forward(self, RGB, NIR, TIR, mask, label, epoch=1):
        mask = torch.cat([torch.ones((RGB.shape[0], 1, 1)).cuda(), mask], dim=1)
        RGB = RGB + self.drop_path(self.attnR(self.normR(RGB), mask=mask))
        RGB = RGB + self.drop_path(self.mlpR(self.normR_(RGB), mask=mask))
        NIR = NIR + self.drop_path(self.attnN(self.normN(NIR), mask=mask))
        NIR = NIR + self.drop_path(self.mlpN(self.normN_(NIR), mask=mask))
        if TIR is not None:
            TIR = TIR + self.drop_path(self.attnT(self.normT(TIR), mask=mask))
            TIR = TIR + self.drop_path(self.mlpT(self.normT_(TIR), mask=mask))
        if self.training:
            RGB_cls = RGB[:, 0, :]
            NIR_cls = NIR[:, 0, :]
            if TIR is not None:
                TIR_cls = TIR[:, 0, :]
                x = torch.cat([RGB, NIR, TIR], dim=1)
            else:
                x = torch.cat([RGB, NIR], dim=1)
            x = x + self.drop_path(self.attn1(self.norm1(x), mask=mask))
            x = x + self.drop_path(self.mlp(self.norm2(x), mask=mask))
            x = self.out_norm(x)
            if TIR is not None:
                mask3 = mask.repeat(1, 3, 1)
                x = x * mask3
            else:
                mask2 = mask.repeat(1, 2, 1)
                x = x * mask2
            return x
        else:
            if TIR is not None:
                x = torch.cat([RGB, NIR, TIR], dim=1)
            else:
                x = torch.cat([RGB, NIR], dim=1)
            x = x + self.drop_path(self.attn1(self.norm1(x), mask=mask))
            x = x + self.drop_path(self.mlp(self.norm2(x), mask=mask))
            x = self.out_norm(x)
            if TIR is not None:
                mask3 = mask.repeat(1, 3, 1)
                x = x * mask3
            else:
                mask2 = mask.repeat(1, 2, 1)
                x = x * mask2
            return x


class PAT(nn.Module):
    def __init__(self, ratio=0.5):
        super(PAT, self).__init__()
        self.part_select = Part_Attention(ratio=ratio)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    def forward(self, RGB_feat, RGB_attn, NIR_feat=None, NIR_attn=None, TIR_feat=None, TIR_attn=None, intersection=False):
        _, RGB_index = self.part_select(RGB_attn)
        _, NIR_index = self.part_select(NIR_attn)
        if TIR_attn is not None:
            _, TIR_index = self.part_select(TIR_attn)
            original_index = RGB_index | NIR_index | TIR_index
            rectint_index = RGB_index & NIR_index & TIR_index  # ！！！！！ 三个模态 mask 的交集区域 ！！！！！
        else:
            original_index = RGB_index | NIR_index
            rectint_index = RGB_index & NIR_index
        index = original_index.unsqueeze(-1)
        rectint_index = rectint_index.unsqueeze(-1)

        RGB_parts = RGB_feat[:, 1:, :] * index
        NIR_parts = NIR_feat[:, 1:, :] * index
        RGB_feats = torch.cat([RGB_feat[:, 0].unsqueeze(1), RGB_parts], dim=1)
        NIR_feats = torch.cat([NIR_feat[:, 0].unsqueeze(1), NIR_parts], dim=1)
        if TIR_attn is not None:
            TIR_parts = TIR_feat[:, 1:, :] * index
            TIR_feats = torch.cat([TIR_feat[:, 0].unsqueeze(1), TIR_parts], dim=1)

        if self.training:
            bgindex = ~index
            RGB_bg = RGB_feat[:, 1:, :] * bgindex
            NIR_bg = NIR_feat[:, 1:, :] * bgindex
            if TIR_attn is not None:
                TIR_bg = TIR_feat[:, 1:, :] * bgindex
                loss_bg = nn.MSELoss()(RGB_bg, NIR_bg) + nn.MSELoss()(RGB_bg, TIR_bg) + nn.MSELoss()(NIR_bg, TIR_bg)
                if intersection:
                    # return RGB_feats, NIR_feats, TIR_feats, RGB_feats_inter, NIR_feats_inter, TIR_feats_inter, index, loss_bg
                    return RGB_feats, NIR_feats, TIR_feats, index, rectint_index, loss_bg
                return RGB_feats, NIR_feats, TIR_feats, index, loss_bg
            else:
                loss_bg = nn.MSELoss()(RGB_bg, NIR_bg)
                if intersection:
                    # return RGB_feats, NIR_feats, RGB_feats_inter, NIR_feats_inter, index, loss_bg
                    return RGB_feats, NIR_feats, index, rectint_index, loss_bg
                return RGB_feats, NIR_feats, index, loss_bg
        else:
            if TIR_attn is not None:
                if intersection:
                    # return RGB_feats, NIR_feats, TIR_feats, RGB_feats_inter, NIR_feats_inter, TIR_feats_inter, index
                    return RGB_feats, NIR_feats, TIR_feats, index, rectint_index
                return RGB_feats, NIR_feats, TIR_feats, index
            else:
                if intersection:
                    # return RGB_feats, NIR_feats, RGB_feats_inter, NIR_feats_inter, index
                    return RGB_feats, NIR_feats, index, rectint_index
                return RGB_feats, NIR_feats, index


